module Logic
  module V401
    Signatures = {
      functions: [{ source: 'LUALIB_API char *luaL_prepbuffer (luaL_Buffer *B);',
                    ffi: [:luaL_prepbuffer, [:pointer], :pointer] },
                  { source: 'LUALIB_API const char *luaL_check_lstr (lua_State *L, int numArg, size_t *len);',
                    ffi: [:luaL_check_lstr, %i[pointer int pointer], :pointer] },
                  { source: 'LUALIB_API const char *luaL_opt_lstr (lua_State *L, int numArg, const char *def, size_t *len);',
                    ffi: [:luaL_opt_lstr, %i[pointer int pointer pointer], :pointer] },
                  { source: 'LUALIB_API double luaL_check_number (lua_State *L, int numArg);',
                    ffi: [:luaL_check_number, %i[pointer int], :double] },
                  { source: 'LUALIB_API double luaL_opt_number (lua_State *L, int numArg, double def);',
                    ffi: [:luaL_opt_number, %i[pointer int double], :double] },
                  { source: 'LUALIB_API int luaL_findstring (const char *name, const char *const _list[]);',
                    ffi: [:luaL_findstring, %i[pointer pointer], :int] },
                  { source: 'LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l);',
                    ffi: [:luaL_addlstring, %i[pointer pointer ulong], :void] },
                  { source: 'LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s);',
                    ffi: [:luaL_addstring, %i[pointer pointer], :void] },
                  { source: 'LUALIB_API void luaL_addvalue (luaL_Buffer *B);',
                    ffi: [:luaL_addvalue, [:pointer], :void] },
                  { source: 'LUALIB_API void luaL_argerror (lua_State *L, int numarg, const char *extramsg);',
                    ffi: [:luaL_argerror, %i[pointer int pointer], :void] },
                  { source: 'LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B);',
                    ffi: [:luaL_buffinit, %i[pointer pointer], :void] },
                  { source: 'LUALIB_API void luaL_checkany (lua_State *L, int narg);',
                    ffi: [:luaL_checkany, %i[pointer int], :void] },
                  { source: 'LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *msg);',
                    ffi: [:luaL_checkstack, %i[pointer int pointer], :void] },
                  { source: 'LUALIB_API void luaL_checktype (lua_State *L, int narg, int t);',
                    ffi: [:luaL_checktype, %i[pointer int int], :void] },
                  { source: 'LUALIB_API void luaL_openlib (lua_State *L, const struct luaL_reg *l, int n);',
                    ffi: [:luaL_openlib, %i[pointer pointer int], :void] },
                  { source: 'LUALIB_API void luaL_pushresult (luaL_Buffer *B);',
                    ffi: [:luaL_pushresult, [:pointer], :void] },
                  { source: 'LUALIB_API void luaL_verror (lua_State *L, const char *fmt, ...);',
                    ffi: [:luaL_verror, %i[pointer pointer varargs], :void] },
                  { source: 'LUALIB_API void lua_baselibopen (lua_State *L);',
                    ffi: [:lua_baselibopen, [:pointer], :void] },
                  { source: 'LUALIB_API void lua_dblibopen (lua_State *L);',
                    ffi: [:lua_dblibopen, [:pointer], :void] },
                  { source: 'LUALIB_API void lua_iolibopen (lua_State *L);',
                    ffi: [:lua_iolibopen, [:pointer], :void] },
                  { source: 'LUALIB_API void lua_mathlibopen (lua_State *L);',
                    ffi: [:lua_mathlibopen, [:pointer], :void] },
                  { source: 'LUALIB_API void lua_strlibopen (lua_State *L);',
                    ffi: [:lua_strlibopen, [:pointer], :void] },
                  { source: 'LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n);',
                    ffi: [:lua_getlocal, %i[pointer pointer int], :pointer] },
                  { source: 'LUA_API const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n);',
                    ffi: [:lua_setlocal, %i[pointer pointer int], :pointer] },
                  { source: 'LUA_API const char *lua_tostring (lua_State *L, int index);',
                    ffi: [:lua_tostring, %i[pointer int], :pointer] },
                  { source: 'LUA_API const char *lua_typename (lua_State *L, int t);',
                    ffi: [:lua_typename, %i[pointer int], :pointer] },
                  { source: 'LUA_API const void *lua_topointer (lua_State *L, int index);',
                    ffi: [:lua_topointer, %i[pointer int], :pointer] },
                  { source: 'LUA_API double lua_tonumber (lua_State *L, int index);',
                    ffi: [:lua_tonumber, %i[pointer int], :double] },
                  { source: 'LUA_API int lua_call (lua_State *L, int nargs, int nresults);',
                    ffi: [:lua_call, %i[pointer int int], :int] },
                  { source: 'LUA_API int lua_copytagmethods (lua_State *L, int tagto, int tagfrom);',
                    ffi: [:lua_copytagmethods, %i[pointer int int], :int] },
                  { source: 'LUA_API int lua_dobuffer (lua_State *L, const char *buff, size_t size, const char *name);',
                    ffi: [:lua_dobuffer, %i[pointer pointer ulong pointer], :int] },
                  { source: 'LUA_API int lua_dofile (lua_State *L, const char *filename);',
                    ffi: [:lua_dofile, %i[pointer pointer], :int] },
                  { source: 'LUA_API int lua_dostring (lua_State *L, const char *str);',
                    ffi: [:lua_dostring, %i[pointer pointer], :int] },
                  { source: 'LUA_API int lua_equal (lua_State *L, int index1, int index2);',
                    ffi: [:lua_equal, %i[pointer int int], :int] },
                  { source: 'LUA_API int lua_getgccount (lua_State *L);',
                    ffi: [:lua_getgccount, [:pointer], :int] },
                  { source: 'LUA_API int lua_getgcthreshold (lua_State *L);',
                    ffi: [:lua_getgcthreshold, [:pointer], :int] },
                  { source: 'LUA_API int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar);',
                    ffi: [:lua_getinfo, %i[pointer pointer pointer], :int] },
                  { source: 'LUA_API int lua_getn (lua_State *L, int index);',
                    ffi: [:lua_getn, %i[pointer int], :int] },
                  { source: 'LUA_API int lua_getref (lua_State *L, int ref);',
                    ffi: [:lua_getref, %i[pointer int], :int] },
                  { source: 'LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar);',
                    ffi: [:lua_getstack, %i[pointer int pointer], :int] },
                  { source: 'LUA_API int lua_gettop (lua_State *L);',
                    ffi: [:lua_gettop, [:pointer], :int] },
                  { source: 'LUA_API int lua_iscfunction (lua_State *L, int index);',
                    ffi: [:lua_iscfunction, %i[pointer int], :int] },
                  { source: 'LUA_API int lua_isnumber (lua_State *L, int index);',
                    ffi: [:lua_isnumber, %i[pointer int], :int] },
                  { source: 'LUA_API int lua_isstring (lua_State *L, int index);',
                    ffi: [:lua_isstring, %i[pointer int], :int] },
                  { source: 'LUA_API int lua_lessthan (lua_State *L, int index1, int index2);',
                    ffi: [:lua_lessthan, %i[pointer int int], :int] },
                  { source: 'LUA_API int lua_newtag (lua_State *L);',
                    ffi: [:lua_newtag, [:pointer], :int] },
                  { source: 'LUA_API int lua_next (lua_State *L, int index);',
                    ffi: [:lua_next, %i[pointer int], :int] },
                  { source: 'LUA_API int lua_ref (lua_State *L, int lock);',
                    ffi: [:lua_ref, %i[pointer int], :int] },
                  { source: 'LUA_API int lua_stackspace (lua_State *L);',
                    ffi: [:lua_stackspace, [:pointer], :int] },
                  { source: 'LUA_API int lua_tag (lua_State *L, int index);',
                    ffi: [:lua_tag, %i[pointer int], :int] },
                  { source: 'LUA_API int lua_type (lua_State *L, int index);',
                    ffi: [:lua_type, %i[pointer int], :int] },
                  { source: 'LUA_API lua_CFunction lua_tocfunction (lua_State *L, int index);',
                    ffi: [:lua_tocfunction, %i[pointer int], :int] },
                  { source: 'LUA_API lua_Hook lua_setcallhook (lua_State *L, lua_Hook func);',
                    ffi: [:lua_setcallhook, [:pointer], :void] },
                  { source: 'LUA_API lua_Hook lua_setlinehook (lua_State *L, lua_Hook func);',
                    ffi: [:lua_setlinehook, [:pointer], :void] },
                  { source: 'LUA_API lua_State *lua_open (int stacksize);',
                    ffi: [:lua_open, [:int], :pointer] },
                  { source: 'LUA_API size_t lua_strlen (lua_State *L, int index);',
                    ffi: [:lua_strlen, %i[pointer int], :ulong] },
                  { source: 'LUA_API void *lua_newuserdata (lua_State *L, size_t size);',
                    ffi: [:lua_newuserdata, %i[pointer ulong], :pointer] },
                  { source: 'LUA_API void *lua_touserdata (lua_State *L, int index);',
                    ffi: [:lua_touserdata, %i[pointer int], :pointer] },
                  { source: 'LUA_API void lua_close (lua_State *L);',
                    ffi: [:lua_close, [:pointer], :void] },
                  { source: 'LUA_API void lua_concat (lua_State *L, int n);',
                    ffi: [:lua_concat, %i[pointer int], :void] },
                  { source: 'LUA_API void lua_error (lua_State *L, const char *s);',
                    ffi: [:lua_error, %i[pointer pointer], :void] },
                  { source: 'LUA_API void lua_getglobal (lua_State *L, const char *name);',
                    ffi: [:lua_getglobal, %i[pointer pointer], :void] },
                  { source: 'LUA_API void lua_getglobals (lua_State *L);',
                    ffi: [:lua_getglobals, [:pointer], :void] },
                  { source: 'LUA_API void lua_gettable (lua_State *L, int index);',
                    ffi: [:lua_gettable, %i[pointer int], :void] },
                  { source: 'LUA_API void lua_gettagmethod (lua_State *L, int tag, const char *event);',
                    ffi: [:lua_gettagmethod, %i[pointer int pointer], :void] },
                  { source: 'LUA_API void lua_insert (lua_State *L, int index);',
                    ffi: [:lua_insert, %i[pointer int], :void] },
                  { source: 'LUA_API void lua_newtable (lua_State *L);',
                    ffi: [:lua_newtable, [:pointer], :void] },
                  { source: 'LUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n);',
                    ffi: [:lua_pushcclosure, %i[pointer int int], :void] },
                  { source: 'LUA_API void lua_pushlstring (lua_State *L, const char *s, size_t len);',
                    ffi: [:lua_pushlstring, %i[pointer pointer ulong], :void] },
                  { source: 'LUA_API void lua_pushnil (lua_State *L);',
                    ffi: [:lua_pushnil, [:pointer], :void] },
                  { source: 'LUA_API void lua_pushnumber (lua_State *L, double n);',
                    ffi: [:lua_pushnumber, %i[pointer double], :void] },
                  { source: 'LUA_API void lua_pushstring (lua_State *L, const char *s);',
                    ffi: [:lua_pushstring, %i[pointer pointer], :void] },
                  { source: 'LUA_API void lua_pushusertag (lua_State *L, void *u, int tag);',
                    ffi: [:lua_pushusertag, %i[pointer pointer int], :void] },
                  { source: 'LUA_API void lua_pushvalue (lua_State *L, int index);',
                    ffi: [:lua_pushvalue, %i[pointer int], :void] },
                  { source: 'LUA_API void lua_rawcall (lua_State *L, int nargs, int nresults);',
                    ffi: [:lua_rawcall, %i[pointer int int], :void] },
                  { source: 'LUA_API void lua_rawget (lua_State *L, int index);',
                    ffi: [:lua_rawget, %i[pointer int], :void] },
                  { source: 'LUA_API void lua_rawgeti (lua_State *L, int index, int n);',
                    ffi: [:lua_rawgeti, %i[pointer int int], :void] },
                  { source: 'LUA_API void lua_rawset (lua_State *L, int index);',
                    ffi: [:lua_rawset, %i[pointer int], :void] },
                  { source: 'LUA_API void lua_rawseti (lua_State *L, int index, int n);',
                    ffi: [:lua_rawseti, %i[pointer int int], :void] },
                  { source: 'LUA_API void lua_remove (lua_State *L, int index);',
                    ffi: [:lua_remove, %i[pointer int], :void] },
                  { source: 'LUA_API void lua_setgcthreshold (lua_State *L, int newthreshold);',
                    ffi: [:lua_setgcthreshold, %i[pointer int], :void] },
                  { source: 'LUA_API void lua_setglobal (lua_State *L, const char *name);',
                    ffi: [:lua_setglobal, %i[pointer pointer], :void] },
                  { source: 'LUA_API void lua_setglobals (lua_State *L);',
                    ffi: [:lua_setglobals, [:pointer], :void] },
                  { source: 'LUA_API void lua_settable (lua_State *L, int index);',
                    ffi: [:lua_settable, %i[pointer int], :void] },
                  { source: 'LUA_API void lua_settag (lua_State *L, int tag);',
                    ffi: [:lua_settag, %i[pointer int], :void] },
                  { source: 'LUA_API void lua_settagmethod (lua_State *L, int tag, const char *event);',
                    ffi: [:lua_settagmethod, %i[pointer int pointer], :void] },
                  { source: 'LUA_API void lua_settop (lua_State *L, int index);',
                    ffi: [:lua_settop, %i[pointer int], :void] },
                  { source: 'LUA_API void lua_unref (lua_State *L, int ref);',
                    ffi: [:lua_unref, %i[pointer int], :void] },
                  { source: 'const char *luaI_classend (lua_State *L, const char *p);',
                    ffi: [:luaI_classend, %i[pointer pointer], :pointer] },
                  { source: 'int luaI_singlematch (int c, const char *p, const char *ep);',
                    ffi: [:luaI_singlematch, %i[int pointer pointer], :int] }],
      macros: [{ source: '#define luaL_addsize(B,n) ((B)->p += (n))',
                 name: 'luaL_addsize',
                 input: %w[B n] },
               { source: '#define luaL_check_int(L,n) ((int)luaL_check_number(L, n))',
                 name: 'luaL_check_int',
                 input: %w[L n] },
               { source: '#define luaL_check_long(L,n) ((long)luaL_check_number(L, n))',
                 name: 'luaL_check_long',
                 input: %w[L n] },
               { source: '#define luaL_check_string(L,n) (luaL_check_lstr(L, (n), NULL))',
                 name: 'luaL_check_string',
                 input: %w[L n] },
               { source: '#define luaL_openl(L,a) luaL_openlib(L, a, (sizeof(a)/sizeof(a[0])))',
                 name: 'luaL_openl',
                 input: %w[L a] },
               { source: '#define luaL_opt_int(L,n,d) ((int)luaL_opt_number(L, n,d))',
                 name: 'luaL_opt_int',
                 input: %w[L n d] },
               { source: '#define luaL_opt_long(L,n,d) ((long)luaL_opt_number(L, n,d))',
                 name: 'luaL_opt_long',
                 input: %w[L n d] },
               { source: '#define luaL_opt_string(L,n,d) (luaL_opt_lstr(L, (n), (d), NULL))',
                 name: 'luaL_opt_string',
                 input: %w[L n d] },
               { source: '#define lua_clonetag(L,t) lua_copytagmethods(L, lua_newtag(L), (t))',
                 name: 'lua_clonetag',
                 input: %w[L t] },
               { source: '#define lua_getregistry(L) lua_getref(L, LUA_REFREGISTRY)',
                 name: 'lua_getregistry',
                 input: ['L'] },
               { source: '#define lua_isfunction(L,n) (lua_type(L,n) == LUA_TFUNCTION)',
                 name: 'lua_isfunction',
                 input: %w[L n] },
               { source: '#define lua_isnil(L,n) (lua_type(L,n) == LUA_TNIL)',
                 name: 'lua_isnil',
                 input: %w[L n] },
               { source: '#define lua_isnull(L,n) (lua_type(L,n) == LUA_TNONE)',
                 name: 'lua_isnull',
                 input: %w[L n] },
               { source: '#define lua_istable(L,n) (lua_type(L,n) == LUA_TTABLE)',
                 name: 'lua_istable',
                 input: %w[L n] },
               { source: '#define lua_isuserdata(L,n) (lua_type(L,n) == LUA_TUSERDATA)',
                 name: 'lua_isuserdata',
                 input: %w[L n] },
               { source: '#define lua_pop(L,n) lua_settop(L, -(n)-1)',
                 name: 'lua_pop',
                 input: %w[L n] },
               { source: '#define lua_pushcfunction(L,f) lua_pushcclosure(L, f, 0)',
                 name: 'lua_pushcfunction',
                 input: %w[L f] },
               { source: '#define lua_pushuserdata(L,u) lua_pushusertag(L, u, 0)',
                 name: 'lua_pushuserdata',
                 input: %w[L u] },
               { source: '#define lua_register(L,n,f) (lua_pushcfunction(L, f), lua_setglobal(L, n))',
                 name: 'lua_register',
                 input: %w[L n f] }]
    }
  end
end
