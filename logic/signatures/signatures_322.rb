module Logic
  module V322
    Signatures = {
      functions: [{ source: 'Closure *luaF_newclosure (int nelems);',
                    ffi: [:luaF_newclosure, [:int], :pointer] },
                  { source: 'Hash *luaH_new (int nhash);',
                    ffi: [:luaH_new, [:int], :pointer] },
                  { source: 'Node *luaH_present (Hash *t, TObject *key);',
                    ffi: [:luaH_present, %i[pointer pointer], :pointer] },
                  { source: 'StkId luaV_execute (Closure *cl, TProtoFunc *tf, StkId base);',
                    ffi: [:luaV_execute, %i[pointer pointer int], :int] },
                  { source: 'TObject *luaA_Address (lua_Object o);',
                    ffi: [:luaA_Address, [:int], :pointer] },
                  { source: 'TObject *luaH_getint (Hash *t, int ref);',
                    ffi: [:luaH_getint, %i[pointer int], :pointer] },
                  { source: 'TObject *luaT_gettagmethod (int t, char *event);',
                    ffi: [:luaT_gettagmethod, %i[int pointer], :pointer] },
                  { source: 'TObject* luaC_getref (int ref);',
                    ffi: [:luaC_getref, [:int], :pointer] },
                  { source: 'TProtoFunc *luaF_newproto (void);',
                    ffi: [:luaF_newproto, [], :pointer] },
                  { source: 'TProtoFunc *luaY_parser (ZIO *z);',
                    ffi: [:luaY_parser, [:pointer], :pointer] },
                  { source: 'TProtoFunc* luaU_undump1 (ZIO* Z);',
                    ffi: [:luaU_undump1, [:pointer], :pointer] },
                  { source: 'TaggedString *luaA_nextvar (TaggedString *g);',
                    ffi: [:luaA_nextvar, [:pointer], :pointer] },
                  { source: 'TaggedString *luaS_collector (void);',
                    ffi: [:luaS_collector, [], :pointer] },
                  { source: 'TaggedString *luaS_collectudata (void);',
                    ffi: [:luaS_collectudata, [], :pointer] },
                  { source: 'TaggedString *luaS_createudata (void *udata, int tag);',
                    ffi: [:luaS_createudata, %i[pointer int], :pointer] },
                  { source: 'TaggedString *luaS_new (char *str);',
                    ffi: [:luaS_new, [:pointer], :pointer] },
                  { source: 'TaggedString *luaS_newfixedstring (char *str);',
                    ffi: [:luaS_newfixedstring, [:pointer], :pointer] },
                  { source: 'TaggedString *luaS_newlstr (char *str, long l);',
                    ffi: [:luaS_newlstr, %i[pointer long], :pointer] },
                  { source: 'char *luaF_getlocalname (TProtoFunc *func, int local_number, int line);',
                    ffi: [:luaF_getlocalname, %i[pointer int int], :pointer] },
                  { source: 'char *luaI_classend (char *p);',
                    ffi: [:luaI_classend, [:pointer], :pointer] },
                  { source: 'char *luaL_buffer (void);', ffi: [:luaL_buffer, [], :pointer] },
                  { source: 'char *luaL_check_lstr (int numArg, long *len);',
                    ffi: [:luaL_check_lstr, %i[int pointer], :pointer] },
                  { source: 'char *luaL_openspace (int size);',
                    ffi: [:luaL_openspace, [:int], :pointer] },
                  { source: 'char *luaL_opt_lstr (int numArg, char *def, long *len);',
                    ffi: [:luaL_opt_lstr, %i[int pointer pointer], :pointer] },
                  { source: 'char *lua_getobjname (lua_Object o, char **name);',
                    ffi: [:lua_getobjname, %i[int pointer], :pointer] },
                  { source: 'char *lua_getstring (lua_Object object);',
                    ffi: [:lua_getstring, [:int], :pointer] },
                  { source: 'char *lua_nextvar (char *varname);',
                    ffi: [:lua_nextvar, [:pointer], :pointer] },
                  { source: 'double luaL_check_number (int numArg);',
                    ffi: [:luaL_check_number, [:int], :double] },
                  { source: 'double luaL_opt_number (int numArg, double def);',
                    ffi: [:luaL_opt_number, %i[int double], :double] },
                  { source: 'double luaO_str2d (char *s);',
                    ffi: [:luaO_str2d, [:pointer], :double] },
                  { source: 'double luaU_str2d (char* b, char* where);',
                    ffi: [:luaU_str2d, %i[pointer pointer], :double] },
                  { source: 'double lua_getnumber (lua_Object object);',
                    ffi: [:lua_getnumber, [:int], :double] },
                  { source: 'int luaA_next (Hash *t, int i);',
                    ffi: [:luaA_next, %i[pointer int], :int] },
                  { source: 'int luaA_passresults (void);',
                    ffi: [:luaA_passresults, [], :int] },
                  { source: 'int luaC_ref (TObject *o, int lock);',
                    ffi: [:luaC_ref, %i[pointer int], :int] },
                  { source: 'int luaD_protectedrun (void);',
                    ffi: [:luaD_protectedrun, [], :int] },
                  { source: 'int luaH_pos (Hash *t, TObject *r);',
                    ffi: [:luaH_pos, %i[pointer pointer], :int] },
                  { source: 'int luaI_singlematch (int c, char *p, char *ep);',
                    ffi: [:luaI_singlematch, %i[int pointer pointer], :int] },
                  { source: 'int luaL_findstring (char *name, char *list[]);',
                    ffi: [:luaL_findstring, %i[pointer pointer], :int] },
                  { source: 'int luaL_getsize (void);', ffi: [:luaL_getsize, [], :int] },
                  { source: 'int luaL_newbuffer (int size);',
                    ffi: [:luaL_newbuffer, [:int], :int] },
                  { source: 'int luaO_equalval (TObject *t1, TObject *t2);',
                    ffi: [:luaO_equalval, %i[pointer pointer], :int] },
                  { source: 'int luaO_redimension (int oldsize);',
                    ffi: [:luaO_redimension, [:int], :int] },
                  { source: 'int luaS_globaldefined (char *name);',
                    ffi: [:luaS_globaldefined, [:pointer], :int] },
                  { source: 'int luaT_effectivetag (TObject *o);',
                    ffi: [:luaT_effectivetag, [:pointer], :int] },
                  { source: 'int luaV_tonumber (TObject *obj);',
                    ffi: [:luaV_tonumber, [:pointer], :int] },
                  { source: 'int luaV_tostring (TObject *obj);',
                    ffi: [:luaV_tostring, [:pointer], :int] },
                  { source: 'int luaX_lex (LexState *LS);',
                    ffi: [:luaX_lex, [:pointer], :int] },
                  { source: 'int lua_callfunction (lua_Object f);',
                    ffi: [:lua_callfunction, [:int], :int] },
                  { source: 'int lua_copytagmethods (int tagto, int tagfrom);',
                    ffi: [:lua_copytagmethods, %i[int int], :int] },
                  { source: 'int lua_currentline (lua_Function func);',
                    ffi: [:lua_currentline, [:int], :int] },
                  { source: 'int lua_dobuffer (char *buff, int size, char *name);',
                    ffi: [:lua_dobuffer, %i[pointer int pointer], :int] },
                  { source: 'int lua_dofile (char *filename);',
                    ffi: [:lua_dofile, [:pointer], :int] },
                  { source: 'int lua_dostring (char *string);',
                    ffi: [:lua_dostring, [:pointer], :int] },
                  { source: 'int lua_iscfunction (lua_Object object);',
                    ffi: [:lua_iscfunction, [:int], :int] },
                  { source: 'int lua_isfunction (lua_Object object);',
                    ffi: [:lua_isfunction, [:int], :int] },
                  { source: 'int lua_isnil (lua_Object object);',
                    ffi: [:lua_isnil, [:int], :int] },
                  { source: 'int lua_isnumber (lua_Object object);',
                    ffi: [:lua_isnumber, [:int], :int] },
                  { source: 'int lua_isstring (lua_Object object);',
                    ffi: [:lua_isstring, [:int], :int] },
                  { source: 'int lua_istable (lua_Object object);',
                    ffi: [:lua_istable, [:int], :int] },
                  { source: 'int lua_isuserdata (lua_Object object);',
                    ffi: [:lua_isuserdata, [:int], :int] },
                  { source: 'int lua_newtag (void);', ffi: [:lua_newtag, [], :int] },
                  { source: 'int lua_next (lua_Object o, int i);',
                    ffi: [:lua_next, %i[int int], :int] },
                  { source: 'int lua_nups (lua_Function func);',
                    ffi: [:lua_nups, [:int], :int] },
                  { source: 'int lua_ref (int lock);', ffi: [:lua_ref, [:int], :int] },
                  { source: 'int lua_setdebug (int debug);',
                    ffi: [:lua_setdebug, [:int], :int] },
                  { source: 'int lua_setlocal (lua_Function func, int local_number);',
                    ffi: [:lua_setlocal, %i[int int], :int] },
                  { source: 'int lua_tag (lua_Object object);',
                    ffi: [:lua_tag, [:int], :int] },
                  { source: 'long lua_collectgarbage (long limit);',
                    ffi: [:lua_collectgarbage, [:long], :long] },
                  { source: 'long lua_strlen (lua_Object object);',
                    ffi: [:lua_strlen, [:int], :long] },
                  { source: 'lua_CFunction lua_getcfunction (lua_Object object);',
                    ffi: [:lua_getcfunction, [:int], :void] },
                  { source: 'lua_CHFunction lua_setcallhook (lua_CHFunction func);',
                    ffi: [:lua_setcallhook, [], :void] },
                  { source: 'lua_Function lua_stackedfunction (int level);',
                    ffi: [:lua_stackedfunction, [:int], :int] },
                  { source: 'lua_LHFunction lua_setlinehook (lua_LHFunction func);',
                    ffi: [:lua_setlinehook, [], :void] },
                  { source: 'lua_Object luaL_functionarg (int arg);',
                    ffi: [:luaL_functionarg, [:int], :int] },
                  { source: 'lua_Object luaL_nonnullarg (int numArg);',
                    ffi: [:luaL_nonnullarg, [:int], :int] },
                  { source: 'lua_Object luaL_tablearg (int arg);',
                    ffi: [:luaL_tablearg, [:int], :int] },
                  { source: 'lua_Object lua_createtable (void);',
                    ffi: [:lua_createtable, [], :int] },
                  { source: 'lua_Object lua_getglobal (char *name);',
                    ffi: [:lua_getglobal, [:pointer], :int] },
                  { source: 'lua_Object lua_getlocal (lua_Function func, int local_number, char **name);',
                    ffi: [:lua_getlocal, %i[int int pointer], :int] },
                  { source: 'lua_Object lua_getref (int ref);',
                    ffi: [:lua_getref, [:int], :int] },
                  { source: 'lua_Object lua_gettable (void);',
                    ffi: [:lua_gettable, [], :int] },
                  { source: 'lua_Object lua_gettagmethod (int tag, char *event);',
                    ffi: [:lua_gettagmethod, %i[int pointer], :int] },
                  { source: 'lua_Object lua_lua2C (int number);',
                    ffi: [:lua_lua2C, [:int], :int] },
                  { source: 'lua_Object lua_pop (void);', ffi: [:lua_pop, [], :int] },
                  { source: 'lua_Object lua_rawgetglobal (char *name);',
                    ffi: [:lua_rawgetglobal, [:pointer], :int] },
                  { source: 'lua_Object lua_rawgettable (void);',
                    ffi: [:lua_rawgettable, [], :int] },
                  { source: 'lua_Object lua_seterrormethod (void);',
                    ffi: [:lua_seterrormethod, [], :int] },
                  { source: 'lua_Object lua_settagmethod (int tag, char *event);',
                    ffi: [:lua_settagmethod, %i[int pointer], :int] },
                  { source: 'lua_State *lua_setstate (lua_State *st);',
                    ffi: [:lua_setstate, [:pointer], :pointer] },
                  { source: 'void *luaM_growaux (void *block, unsigned long nelems, int inc, int size, char *errormsg, unsigned long limit);',
                    ffi: [:luaM_growaux,
                          %i[pointer long int int pointer long],
                          :pointer] },
                  { source: 'void *luaM_realloc (void *oldblock, unsigned long size);',
                    ffi: [:luaM_realloc, %i[pointer long], :pointer] },
                  { source: 'void *lua_getuserdata (lua_Object object);',
                    ffi: [:lua_getuserdata, [:int], :pointer] },
                  { source: 'void luaA_packresults (void);',
                    ffi: [:luaA_packresults, [], :void] },
                  { source: 'void luaA_pushobject (TObject *o);',
                    ffi: [:luaA_pushobject, [:pointer], :void] },
                  { source: 'void luaB_predefine (void);',
                    ffi: [:luaB_predefine, [], :void] },
                  { source: 'void luaC_checkGC (void);', ffi: [:luaC_checkGC, [], :void] },
                  { source: 'void luaC_hashcallIM (Hash *l);',
                    ffi: [:luaC_hashcallIM, [:pointer], :void] },
                  { source: 'void luaC_strcallIM (TaggedString *l);',
                    ffi: [:luaC_strcallIM, [:pointer], :void] },
                  { source: 'void luaD_adjusttop (StkId newtop);',
                    ffi: [:luaD_adjusttop, [:int], :void] },
                  { source: 'void luaD_callHook (StkId base, TProtoFunc *tf, int isreturn);',
                    ffi: [:luaD_callHook, %i[int pointer int], :void] },
                  { source: 'void luaD_callTM (TObject *f, int nParams, int nResults);',
                    ffi: [:luaD_callTM, %i[pointer int int], :void] },
                  { source: 'void luaD_calln (int nArgs, int nResults);',
                    ffi: [:luaD_calln, %i[int int], :void] },
                  { source: 'void luaD_checkstack (int n);',
                    ffi: [:luaD_checkstack, [:int], :void] },
                  { source: 'void luaD_gcIM (TObject *o);',
                    ffi: [:luaD_gcIM, [:pointer], :void] },
                  { source: 'void luaD_init (void);', ffi: [:luaD_init, [], :void] },
                  { source: 'void luaD_lineHook (int line);',
                    ffi: [:luaD_lineHook, [:int], :void] },
                  { source: 'void luaD_openstack (int nelems);',
                    ffi: [:luaD_openstack, [:int], :void] },
                  { source: 'void luaF_freeclosure (Closure *l);',
                    ffi: [:luaF_freeclosure, [:pointer], :void] },
                  { source: 'void luaF_freeproto (TProtoFunc *l);',
                    ffi: [:luaF_freeproto, [:pointer], :void] },
                  { source: 'void luaH_free (Hash *frees);',
                    ffi: [:luaH_free, [:pointer], :void] },
                  { source: 'void luaH_set (Hash *t, TObject *ref, TObject *val);',
                    ffi: [:luaH_set, %i[pointer pointer pointer], :void] },
                  { source: 'void luaH_setint (Hash *t, int ref, TObject *val);',
                    ffi: [:luaH_setint, %i[pointer int pointer], :void] },
                  { source: 'void luaL_addchar (int c);',
                    ffi: [:luaL_addchar, [:int], :void] },
                  { source: 'void luaL_addsize (int n);',
                    ffi: [:luaL_addsize, [:int], :void] },
                  { source: 'void luaL_argerror (int numarg, char *extramsg);',
                    ffi: [:luaL_argerror, %i[int pointer], :void] },
                  { source: 'void luaL_chunkid (char *out, char *source, int len);',
                    ffi: [:luaL_chunkid, %i[pointer pointer int], :void] },
                  { source: 'void luaL_filesource (char *out, char *filename, int len);',
                    ffi: [:luaL_filesource, %i[pointer pointer int], :void] },
                  { source: 'void luaL_oldbuffer (int old);',
                    ffi: [:luaL_oldbuffer, [:int], :void] },
                  { source: 'void luaL_openlib (struct luaL_reg *l, int n);',
                    ffi: [:luaL_openlib, %i[pointer int], :void] },
                  { source: 'void luaL_resetbuffer (void);',
                    ffi: [:luaL_resetbuffer, [], :void] },
                  { source: 'void luaL_verror (char *fmt, ...);',
                    ffi: [:luaL_verror, %i[pointer varargs], :void] },
                  { source: 'void luaO_insertlist (GCnode *root, GCnode *node);',
                    ffi: [:luaO_insertlist, %i[pointer pointer], :void] },
                  { source: 'void luaS_free (TaggedString *l);',
                    ffi: [:luaS_free, [:pointer], :void] },
                  { source: 'void luaS_freeall (void);', ffi: [:luaS_freeall, [], :void] },
                  { source: 'void luaS_init (void);', ffi: [:luaS_init, [], :void] },
                  { source: 'void luaS_rawsetglobal (TaggedString *ts, TObject *newval);',
                    ffi: [:luaS_rawsetglobal, %i[pointer pointer], :void] },
                  { source: 'void luaT_init (void);', ffi: [:luaT_init, [], :void] },
                  { source: 'void luaT_realtag (int tag);',
                    ffi: [:luaT_realtag, [:int], :void] },
                  { source: 'void luaT_settagmethod (int t, char *event, TObject *func);',
                    ffi: [:luaT_settagmethod, %i[int pointer pointer], :void] },
                  { source: 'void luaU_badconstant (char* s, int i, TObject* o, TProtoFunc* tf);',
                    ffi: [:luaU_badconstant, %i[pointer int pointer pointer], :void] },
                  { source: 'void luaV_closure (int nelems);',
                    ffi: [:luaV_closure, [:int], :void] },
                  { source: 'void luaV_comparison (lua_Type ttype_less, lua_Type ttype_equal, lua_Type ttype_great, IMS op);',
                    ffi: [:luaV_comparison, %i[int int int int], :void] },
                  { source: 'void luaV_getglobal (TaggedString *ts);',
                    ffi: [:luaV_getglobal, [:pointer], :void] },
                  { source: 'void luaV_gettable (void);', ffi: [:luaV_gettable, [], :void] },
                  { source: 'void luaV_pack (StkId firstel, int nvararg, TObject *tab);',
                    ffi: [:luaV_pack, %i[int int pointer], :void] },
                  { source: 'void luaV_rawsettable (TObject *t);',
                    ffi: [:luaV_rawsettable, [:pointer], :void] },
                  { source: 'void luaV_setglobal (TaggedString *ts);',
                    ffi: [:luaV_setglobal, [:pointer], :void] },
                  { source: 'void luaV_setn (Hash *t, int val);',
                    ffi: [:luaV_setn, %i[pointer int], :void] },
                  { source: 'void luaV_settable (TObject *t);',
                    ffi: [:luaV_settable, [:pointer], :void] },
                  { source: 'void luaX_error (LexState *ls, char *s);',
                    ffi: [:luaX_error, %i[pointer pointer], :void] },
                  { source: 'void luaX_init (void);', ffi: [:luaX_init, [], :void] },
                  { source: 'void luaX_setinput (LexState *LS, ZIO *z);',
                    ffi: [:luaX_setinput, %i[pointer pointer], :void] },
                  { source: 'void luaX_syntaxerror (LexState *ls, char *s, char *token);',
                    ffi: [:luaX_syntaxerror, %i[pointer pointer pointer], :void] },
                  { source: 'void luaX_token2str (int token, char *s);',
                    ffi: [:luaX_token2str, %i[int pointer], :void] },
                  { source: 'void lua_beginblock (void);',
                    ffi: [:lua_beginblock, [], :void] },
                  { source: 'void lua_close (void);', ffi: [:lua_close, [], :void] },
                  { source: 'void lua_dblibopen (void);', ffi: [:lua_dblibopen, [], :void] },
                  { source: 'void lua_endblock (void);', ffi: [:lua_endblock, [], :void] },
                  { source: 'void lua_error (char *s);',
                    ffi: [:lua_error, [:pointer], :void] },
                  { source: 'void lua_funcinfo (lua_Object func, char **source, int *linedefined);',
                    ffi: [:lua_funcinfo, %i[int pointer pointer], :void] },
                  { source: 'void lua_iolibopen (void);', ffi: [:lua_iolibopen, [], :void] },
                  { source: 'void lua_mathlibopen (void);',
                    ffi: [:lua_mathlibopen, [], :void] },
                  { source: 'void lua_open (void);', ffi: [:lua_open, [], :void] },
                  { source: 'void lua_pushcclosure (lua_CFunction fn, int n);',
                    ffi: [:lua_pushcclosure, %i[void int], :void] },
                  { source: 'void lua_pushlstring (char *s, long len);',
                    ffi: [:lua_pushlstring, %i[pointer long], :void] },
                  { source: 'void lua_pushnil (void);', ffi: [:lua_pushnil, [], :void] },
                  { source: 'void lua_pushnumber (double n);',
                    ffi: [:lua_pushnumber, [:double], :void] },
                  { source: 'void lua_pushobject (lua_Object object);',
                    ffi: [:lua_pushobject, [:int], :void] },
                  { source: 'void lua_pushstring (char *s);',
                    ffi: [:lua_pushstring, [:pointer], :void] },
                  { source: 'void lua_pushusertag (void *u, int tag);',
                    ffi: [:lua_pushusertag, %i[pointer int], :void] },
                  { source: 'void lua_rawsetglobal (char *name);',
                    ffi: [:lua_rawsetglobal, [:pointer], :void] },
                  { source: 'void lua_rawsettable (void);',
                    ffi: [:lua_rawsettable, [], :void] },
                  { source: 'void lua_setglobal (char *name);',
                    ffi: [:lua_setglobal, [:pointer], :void] },
                  { source: 'void lua_settable (void);', ffi: [:lua_settable, [], :void] },
                  { source: 'void lua_settag (int tag);', ffi: [:lua_settag, [:int], :void] },
                  { source: 'void lua_strlibopen (void);',
                    ffi: [:lua_strlibopen, [], :void] },
                  { source: 'void lua_unref (int ref);', ffi: [:lua_unref, [:int], :void] },
                  { source: 'void lua_userinit (void);', ffi: [:lua_userinit, [], :void] }],
      macros: [{ source: '#define LUA_ASSERT(c,s) { if (!(c)) LUA_INTERNALERROR(s); }',
                 name: 'LUA_ASSERT',
                 input: %w[c s] },
               { source: '#define luaH_get(t,ref) (val(luaH_present((t), (ref))))',
                 name: 'luaH_get',
                 input: %w[t ref] },
               { source: '#define luaH_move(t,from,to) (luaH_setint(t, to, luaH_getint(t, from)))',
                 name: 'luaH_move',
                 input: %w[t from to] },
               { source: '#define luaL_check_int(n) ((int)luaL_check_number(n))',
                 name: 'luaL_check_intn',
                 input: ['int'] },
               { source: '#define luaL_check_long(n) ((long)luaL_check_number(n))',
                 name: 'luaL_check_longn',
                 input: ['long'] },
               { source: '#define luaL_opt_int(n,d) ((int)luaL_opt_number(n,d))',
                 name: 'luaL_opt_int',
                 input: %w[n d] },
               { source: '#define luaL_opt_long(n,d) ((long)luaL_opt_number(n,d))',
                 name: 'luaL_opt_long',
                 input: %w[n d] },
               { source: '#define luaL_opt_string(n, d) (luaL_opt_lstr((n), (d), NULL))',
                 name: 'luaL_opt_string',
                 input: %w[n d] },
               { source: '#define luaM_free(b) luaM_realloc((b), 0)',
                 name: 'luaM_free',
                 input: ['b'] },
               { source: '#define luaM_malloc(t) luaM_realloc(NULL, (t))',
                 name: 'luaM_malloc',
                 input: ['t'] },
               { source: '#define luaM_new(t) ((t *)luaM_malloc(sizeof(t)))',
                 name: 'luaM_newt',
                 input: ['t'] },
               { source: '#define luaM_newvector(n,t) ((t *)luaM_malloc((n)*sizeof(t)))',
                 name: 'luaM_newvector',
                 input: %w[n t] },
               { source: '#define luaM_reallocvector(v,n,t) ((v)=(t *)luaM_realloc(v,(n)*sizeof(t)))',
                 name: 'luaM_reallocvector',
                 input: %w[v n t] },
               { source: '#define luaO_equalObj(t1,t2) ((ttype(t1) != ttype(t2)) ? 0 \\ : luaO_equalval(t1,t2))',
                 name: 'luaO_equalObj',
                 input: %w[t1 t2] },
               { source: '#define luaO_memdown(d,s,n) memmove(d,s,n)',
                 name: 'luaO_memdown',
                 input: %w[d s n] },
               { source: '#define luaO_memup(d,s,n) memmove(d,s,n)',
                 name: 'luaO_memup',
                 input: %w[d s n] },
               { source: '#define luaT_getim(tag,event) (&L->IMtable[-(tag)].int_method[event])',
                 name: 'luaT_getim',
                 input: %w[tag event] },
               { source: '#define luaT_getimbyObj(o,e) (luaT_getim(luaT_effectivetag(o),(e)))',
                 name: 'luaT_getimbyObj',
                 input: %w[o e] },
               { source: '#define lua_call(name) lua_callfunction(lua_getglobal(name))',
                 name: 'lua_call',
                 input: ['name'] },
               { source: '#define lua_clonetag(t) lua_copytagmethods(lua_newtag(), (t))',
                 name: 'lua_clonetag',
                 input: ['t'] },
               { source: '#define lua_getfield(o,f) (lua_pushobject(o), lua_pushstring(f), lua_gettable())',
                 name: 'lua_getfield',
                 input: %w[o f] },
               { source: '#define lua_getindexed(o,n) (lua_pushobject(o), lua_pushnumber(n), lua_gettable())',
                 name: 'lua_getindexed',
                 input: %w[o n] },
               { source: '#define lua_getparam(_) lua_lua2C(_)',
                 name: 'lua_getparam',
                 input: ['_'] },
               { source: '#define lua_getresult(_) lua_lua2C(_)',
                 name: 'lua_getresult',
                 input: ['_'] },
               { source: '#define lua_lock() lua_ref(1)', name: 'lua_lock', input: [] },
               { source: '#define lua_lockobject(o) lua_refobject(o,1)',
                 name: 'lua_lockobject',
                 input: ['o'] },
               { source: '#define lua_pushcfunction(f) lua_pushcclosure(f, 0)',
                 name: 'lua_pushcfunction',
                 input: ['f'] },
               { source: '#define lua_pushliteral(o) lua_pushstring(o)',
                 name: 'lua_pushliteral',
                 input: ['o'] },
               { source: '#define lua_pushref(ref) lua_pushobject(lua_getref(ref))',
                 name: 'lua_pushref',
                 input: ['ref'] },
               { source: '#define lua_pushuserdata(u) lua_pushusertag(u, 0)',
                 name: 'lua_pushuserdata',
                 input: ['u'] },
               { source: '#define lua_refobject(o,l) (lua_pushobject(o), lua_ref(l))',
                 name: 'lua_refobject',
                 input: %w[o l] },
               { source: '#define lua_register(n,f) (lua_pushcfunction(f), lua_setglobal(n))',
                 name: 'lua_register',
                 input: %w[n f] }]
    }
  end
end
